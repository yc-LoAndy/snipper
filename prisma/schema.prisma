// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model user {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  name     String?
  tokens   token?
  folders  folder[]
}

model folder {
  id         Int       @id @default(autoincrement())
  name       String
  ownerEmail String
  owner      user      @relation(fields: [ownerEmail], references: [email])
  isTopLevel Boolean
  parrentId  Int?
  parrent    folder?   @relation("FolderParent", fields: [parrentId], references: [id])
  children   folder[]  @relation("FolderParent")
  snippets   snippet[]

  @@unique([parrentId, name]) // unique folder names in the same folder
  @@unique([ownerEmail, isTopLevel, name]) // unique folder name for each user's top level folders
}

model token {
  user            user     @relation(fields: [userEmail], references: [email])
  userEmail       String   @unique
  accessToken     String   @unique
  accessTokenExp  DateTime
  refreshToken    String   @unique
  refreshTokenExp DateTime
}

model snippet {
  id       Int    @id @default(autoincrement())
  content  String @default("")
  fileName String
  folderId Int
  folder   folder @relation(fields: [folderId], references: [id])

  @@unique([folderId, fileName]) // unique file name in each folder
}
